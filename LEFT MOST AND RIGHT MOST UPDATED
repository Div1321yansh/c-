Given a sorted array with possibly duplicate elements. The task is to find indexes of first and last occurrences of an element X in the given array.

Note: If the element is not present in the array return {-1,-1} as pair.

 

Example 1:

Input:
N = 9
v[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}
X = 5
Output:
2 5
Explanation:
Index of first occurrence of 5 is 2
and index of last occurrence of 5 is 5.


//CODE-------------------------------------------------------------------------------------------------------------




class Solution
{
    public:
    int firstocc(vector<long long> v, long long x)
    {
        long long int s=0;
        long long int e=v.size()-1;
        long long int m=s + (e-s)/2;
        long long int ans=-1;
        while(s<=e)
        {
            if(v[m]==x)
            {
                ans=m;
                e=m-1;
            }
            else if(v[m]<x)
            {
                s=m+1;
            }
            else
            {
                e=m-1;
            }
            m=s + (e-s)/2;
        }
        return ans;
    }
    
    int lastocc(vector<long long> v, long long x)
    {
        long long int s=0;
        long long int e=v.size()-1;
        long long int m=s + (e-s)/2;
        long long int ans=-1;
        while(s<=e)
        {
            if(v[m]==x)
            {
                ans=m;
                s=m+1;
            }
            else if(v[m]<x)
            {
                s=m+1;
            }
            else
            {
                e=m-1;
            }
            m=s + (e-s)/2;
        }
        return ans;
    }
    pair<long,long> indexes(vector<long long> v, long long x)
    {
        pair<long int,long int>ans;
        
        ans.first=firstocc(v,x);
        ans.second=lastocc(v,x);
        return ans;
    }
};

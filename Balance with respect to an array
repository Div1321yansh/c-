As a programmer, it is very necessary to maintain balance in the life.
Here is task for you to maintain a balance. Your task is to find whether a given number x is balanced with respect to a given array a[ ] which is sorted in non-decreasing order.
Given a sorted array a[ ], the ceiling of x is the smallest element in the array greater than or equal to x, and the floor of x is the greatest element smaller than or equal to x. The number 'x' is said to be balanced if the absolute difference between floor of x and x is equal to the absolute difference between ceil of x and x i.e. if absolute(x - floor(x, a[])) = absolute(ceil(x, a[]) - x).
If one of floor or ceil does not exist assume 'x' to be balanced.

Example 1:

Input:
N = 7  
x = 5
a[] = {1, 2, 8, 10, 10, 12, 19} 
Output: 
Balanced
Explanation: Here 2 is the floor value and 
8 is the ceil value and (5 - 2) = (8 - 5).


///CODE-----------------------------------------------------------------------------------------------------------


class Solution{
    public:
    string isBalanced(int a[],int n,int x)
    {
        if(a[0]>=x)
        {
            return "Balanced";
        }
        else if(a[n-1]<=x)
        {
            return "Balanced";
        }
        else
        {
            int s=0;
            int e=n-1;
            int m=s + (e-s)/2;
            int diff,diff1;
            int num_floor,index_floor;
            while(s<=e)
            {
                if(a[m]==x)
                {
                    return "Balanced";
                }
                else if(a[m]>x)
                {
                    e=m-1;
                }
                else
                {
                    num_floor=a[m];
                    index_floor=m;
                    s=m+1;
                }
                m=s + (e-s)/2;
            }
            if((x-num_floor)==abs(x-a[index_floor+1]))
            {
                return "Balanced";
            }
            else
            {
                return "Not Balanced";
            }
        }
    }
};

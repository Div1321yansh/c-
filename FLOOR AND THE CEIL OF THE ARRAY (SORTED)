Given an unsorted array Arr[] of N integers and an integer X, find floor and ceiling of X in Arr[0..N-1].

Floor of X is the largest element which is smaller than or equal to X. Floor of X doesn’t exist if X is smaller than smallest element of Arr[].

Ceil of X is the smallest element which is greater than or equal to X. Ceil of X doesn’t exist if X is greater than greatest element of Arr[].

Example 1:

Input:
N = 8, X = 7
Arr[] = {5, 6, 8, 9, 6, 5, 5, 6}
Output: 6 8
Explanation:
Floor of 7 is 6 and ceil of 7 
is 8.



//////CODE---------------------------------------------------------------------------------------------



pair<int, int> getFloorAndCeil(int arr[], int n, int x) {
    // code here
    sort(arr,arr+n);
    int s=0;
    int e=n-1;
    int m=s + (e-s)/2;
    int index;
    pair<int,int>ans;
    ans.first=-1;
    ans.second=-1;
    if(arr[0]>x)
    {
        ans.second=arr[0];
        return ans;
    }
    else if(arr[n-1]<x)
    {
        ans.first=arr[n-1];
        return ans;
    }
    else
    {
        while(s<=e)
        {
            if(arr[m]==x)
            {
                ans.first=x;
                ans.second=x;
                return ans;
            }
            else if(arr[m]>x)
            {
                e=m-1;
            }
            else
            {
                ans.first=arr[m];
                index=m;
                s=m+1;
            }
            m=s + (e-s)/2;
        }
        
        if(ans.first!=-1)
        {
            ans.second=arr[index+1];
        }
        return ans;
    }
}

Given a sorted array A[] of N positive integers having all the numbers occurring exactly twice, except for one number which will occur only once. Find the number occurring only once.

Example 1:

Input:
N = 5
A = {1, 1, 2, 5, 5}
Output: 2
Explanation: 
Since 2 occurs once, while
other numbers occur twice, 
2 is the answer.
Example 2:

Input:
N = 7
A = {2, 2, 5, 5, 20, 30, 30}
Output: 20
Explanation:
Since 20 occurs once, while
other numbers occur twice, 
20 is the answer.


//////code------------------------------------------------------------------------------------


BRUTE FORCE ------------------------------------------------


BY XOR METHOD ------------------------

int ans=0;
	   for(int i=0;i<N;i++)
	   {
	       ans=ans^A[i];
	   }
	   return ans;
     
     
     
     BETTTER APPROACH --------------------------------------
     
     
      for(int i=0;i<N;i+=2)
	    {
	        if(A[i]!=A[i+1])
	        {
	            return A[i]; 
	        }
	        if(i==N-1)
	        {
	            return A[i];
	        }
	    }
      
      
      
      OPTIMAL APPROACH ---------------------------------------------------
      
      
      
     TWO POINTER APPROACH -----------------------------
     
     int i=0;
	   int j=N-1;
	   while(i<=j)
	   {
	       if(A[i]!=A[i+1])
	       {
	           return A[i];
	       }
	       if(A[j]!=A[j-1])
	       {
	           return A[j];
	       }
	       if(i==j)
	       {
	           return A[i];
	       }
	       i+=2;
	       j-=2;
	   }

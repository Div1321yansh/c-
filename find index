Given an unsorted array Arr[] of N integers and a Key which is present in this array. You need to write a program to find the start index( index where the element is first found from left in the array ) and end index( index where the element is first found from right in the array ).If the key does not exist in the array then return -1 for both start and end index in this case.

Example 1:

Input:
N = 6
arr[] = { 1, 2, 3, 4, 5, 5 }
Key = 5
Output:  4 5
Explanation:
5 appears first time at index 4 and
appears last time at index 5.
(0 based indexing)
 

Example 2:

Input:
N=6
arr[] = { 6, 5, 4, 3, 1, 2 }
Key = 4
Output:  2 2 



////code------------------------------------------------------------------



class Solution
{
  public:
    vector<int> findIndex(int a[], int n, int key)
    {
        //code here.
        vector<int>v;
       for(int i=0;i<n;i++)
       {
           if(a[i]==key)
           {
               v.push_back(i);
               break;
           }
       }
       if(v.empty()==true)
       {
           v.push_back(-1);
           v.push_back(-1);
           return v;
       }
       for(int j=n-1;j>=0;j--)
       {
           if(a[j]==key)
           {
               v.push_back(j);
               break;
           }
       }
       return v;
        
    }
  

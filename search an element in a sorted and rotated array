Given a sorted and rotated array A of N distinct elements which is rotated at some point, and given an element key. The task is to find the index of the given element key in the array A. The whole array A is given as the range to search.

Example 1:

Input:
N = 9
A[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}
key = 10
l = 0 , h = 8
Output:
5
Explanation: 10 is found at index 5


///CODE-------------------------------------------------------------------------------


class Solution{
    public:
    int search(int A[], int l, int h, int key){
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        
        //complete the function here
    int s = 0;
    int e = h;
    int mid = s + (e-s)/2;

    while(s<e) {

        if(A[mid] >= A[0])
        {
            s = mid+1;
        }
        else{
            e = mid;
        }
        mid = s + (e-s)/2;
    }
    int pivot=s;
    int s1,e1,m1;
    if(key>=A[0])
    {
        s1=0;
        e1=pivot-1;
    }
    else if(key<A[0])
    {
        s1=pivot;
        e1=h;
    }
    m1=s1+(e1-s1)/2;
    while(s1<=e1)
    {
        if(A[m1]==key)
        {
            return m1;
        }
        else if(A[m1]>key)
        {
            e1=m1-1;
        }
        else{
            s1=m1+1;
        }
        m1=s1+(e1-s1)/2;
    }
    return -1;
    }
